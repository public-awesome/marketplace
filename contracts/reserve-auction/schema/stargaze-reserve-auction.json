{
  "contract_name": "stargaze-reserve-auction",
  "contract_version": "1.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "create_auction_fee",
      "extend_duration",
      "fair_burn",
      "halt_buffer_duration",
      "halt_duration_threshold",
      "halt_postpone_duration",
      "max_auctions_to_settle_per_block",
      "max_duration",
      "min_bid_increment_percent",
      "min_duration",
      "min_reserve_prices",
      "trading_fee_percent"
    ],
    "properties": {
      "create_auction_fee": {
        "description": "The fee that must be paid when creating an auction",
        "allOf": [
          {
            "$ref": "#/definitions/Coin"
          }
        ]
      },
      "extend_duration": {
        "description": "When a bid is placed near the end of an auction, extend the auction by this duration",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "fair_burn": {
        "description": "The address of the fair burn contract",
        "type": "string"
      },
      "halt_buffer_duration": {
        "description": "The amount of time, in seconds, added to the end of a halt period and used to determine a halt window. If an auction ends within a halt window it cannot be settled, it must be postponed.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "halt_duration_threshold": {
        "description": "If the time between blocks exceeds the halt_duration_threshold, then it is determined that a halt has occurred.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "halt_postpone_duration": {
        "description": "The amount of time, in seconds, that should be added to an auction that needs to be postponed.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_auctions_to_settle_per_block": {
        "description": "The maximum number of auctions that can be processed in each block",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_duration": {
        "description": "The maximum duration of an auction",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "min_bid_increment_percent": {
        "description": "Each bid must be some number of basis points greater than the previous bid",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "min_duration": {
        "description": "The minimum duration of an auction",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "min_reserve_prices": {
        "description": "The minimum reserve prices for the various denoms. Denoms no defined are not supported.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/Coin"
        }
      },
      "trading_fee_percent": {
        "description": "The number of basis points that is fair burned on each settled auction",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_auction"
        ],
        "properties": {
          "create_auction": {
            "type": "object",
            "required": [
              "collection",
              "duration",
              "reserve_price",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "reserve_price": {
                "$ref": "#/definitions/Coin"
              },
              "seller_funds_recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_reserve_price"
        ],
        "properties": {
          "update_reserve_price": {
            "type": "object",
            "required": [
              "collection",
              "reserve_price",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "reserve_price": {
                "$ref": "#/definitions/Coin"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_auction"
        ],
        "properties": {
          "cancel_auction": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "place_bid"
        ],
        "properties": {
          "place_bid": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "settle_auction"
        ],
        "properties": {
          "settle_auction": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "halt_manager"
        ],
        "properties": {
          "halt_manager": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "min_reserve_prices"
        ],
        "properties": {
          "min_reserve_prices": {
            "type": "object",
            "properties": {
              "query_options": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/QueryOptions_for_MinReservePriceOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "auction"
        ],
        "properties": {
          "auction": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "auctions_by_seller"
        ],
        "properties": {
          "auctions_by_seller": {
            "type": "object",
            "required": [
              "seller"
            ],
            "properties": {
              "query_options": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/QueryOptions_for_AuctionKeyOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "seller": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "auctions_by_end_time"
        ],
        "properties": {
          "auctions_by_end_time": {
            "type": "object",
            "required": [
              "end_time"
            ],
            "properties": {
              "end_time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "query_options": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/QueryOptions_for_AuctionKeyOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AuctionKeyOffset": {
        "type": "object",
        "required": [
          "collection",
          "token_id"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MinReservePriceOffset": {
        "type": "object",
        "required": [
          "denom"
        ],
        "properties": {
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "QueryOptions_for_AuctionKeyOffset": {
        "description": "QueryOptions are used to paginate contract queries",
        "type": "object",
        "properties": {
          "descending": {
            "description": "Whether to sort items in ascending or descending order",
            "type": [
              "boolean",
              "null"
            ]
          },
          "limit": {
            "description": "The number of items that will be returned",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "start_after": {
            "description": "The key to start the query after",
            "anyOf": [
              {
                "$ref": "#/definitions/AuctionKeyOffset"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "QueryOptions_for_MinReservePriceOffset": {
        "description": "QueryOptions are used to paginate contract queries",
        "type": "object",
        "properties": {
          "descending": {
            "description": "Whether to sort items in ascending or descending order",
            "type": [
              "boolean",
              "null"
            ]
          },
          "limit": {
            "description": "The number of items that will be returned",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "start_after": {
            "description": "The key to start the query after",
            "anyOf": [
              {
                "$ref": "#/definitions/MinReservePriceOffset"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "auction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Auction",
      "anyOf": [
        {
          "$ref": "#/definitions/Auction"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Auction": {
          "type": "object",
          "required": [
            "collection",
            "duration",
            "reserve_price",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "end_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "first_bid_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "high_bid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HighBid"
                },
                {
                  "type": "null"
                }
              ]
            },
            "reserve_price": {
              "$ref": "#/definitions/Coin"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "seller_funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "HighBid": {
          "type": "object",
          "required": [
            "bidder",
            "coin"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "auctions_by_end_time": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Auction",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Auction"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Auction": {
          "type": "object",
          "required": [
            "collection",
            "duration",
            "reserve_price",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "end_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "first_bid_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "high_bid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HighBid"
                },
                {
                  "type": "null"
                }
              ]
            },
            "reserve_price": {
              "$ref": "#/definitions/Coin"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "seller_funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "HighBid": {
          "type": "object",
          "required": [
            "bidder",
            "coin"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "auctions_by_seller": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Auction",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Auction"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Auction": {
          "type": "object",
          "required": [
            "collection",
            "duration",
            "reserve_price",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "end_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "first_bid_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "high_bid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HighBid"
                },
                {
                  "type": "null"
                }
              ]
            },
            "reserve_price": {
              "$ref": "#/definitions/Coin"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "seller_funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "HighBid": {
          "type": "object",
          "required": [
            "bidder",
            "coin"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "create_auction_fee",
        "extend_duration",
        "fair_burn",
        "halt_buffer_duration",
        "halt_duration_threshold",
        "halt_postpone_duration",
        "max_auctions_to_settle_per_block",
        "max_duration",
        "min_bid_increment_percent",
        "min_duration",
        "trading_fee_percent"
      ],
      "properties": {
        "create_auction_fee": {
          "$ref": "#/definitions/Coin"
        },
        "extend_duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fair_burn": {
          "$ref": "#/definitions/Addr"
        },
        "halt_buffer_duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "halt_duration_threshold": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "halt_postpone_duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_auctions_to_settle_per_block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min_bid_increment_percent": {
          "$ref": "#/definitions/Decimal"
        },
        "min_duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "trading_fee_percent": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "halt_manager": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HaltManager",
      "type": "object",
      "required": [
        "halt_windows",
        "prev_block_time"
      ],
      "properties": {
        "halt_windows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HaltWindow"
          }
        },
        "prev_block_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "HaltWindow": {
          "type": "object",
          "required": [
            "end_time",
            "start_time"
          ],
          "properties": {
            "end_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "min_reserve_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Coin",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
