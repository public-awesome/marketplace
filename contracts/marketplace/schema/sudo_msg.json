{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SudoMsg",
  "oneOf": [
    {
      "description": "Update the contract parameters Can only be called by governance",
      "type": "object",
      "required": ["update_params"],
      "properties": {
        "update_params": {
          "type": "object",
          "properties": {
            "ask_expiry": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExpiryRange"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bid_expiry": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExpiryRange"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_finders_fee_bps": {
              "type": ["integer", "null"],
              "format": "uint64",
              "minimum": 0.0
            },
            "min_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "operators": {
              "type": ["array", "null"],
              "items": {
                "type": "string"
              }
            },
            "trading_fee_bps": {
              "type": ["integer", "null"],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a new hook to be informed of all asks",
      "type": "object",
      "required": ["add_ask_created_hook"],
      "properties": {
        "add_ask_created_hook": {
          "type": "object",
          "required": ["hook"],
          "properties": {
            "hook": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a ask hook",
      "type": "object",
      "required": ["remove_ask_created_hook"],
      "properties": {
        "remove_ask_created_hook": {
          "type": "object",
          "required": ["hook"],
          "properties": {
            "hook": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a new hook to be informed of all trades",
      "type": "object",
      "required": ["add_sale_hook"],
      "properties": {
        "add_sale_hook": {
          "type": "object",
          "required": ["hook"],
          "properties": {
            "hook": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a trade hook",
      "type": "object",
      "required": ["remove_sale_hook"],
      "properties": {
        "remove_sale_hook": {
          "type": "object",
          "required": ["hook"],
          "properties": {
            "hook": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ExpiryRange": {
      "type": "object",
      "required": ["max", "min"],
      "properties": {
        "max": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
