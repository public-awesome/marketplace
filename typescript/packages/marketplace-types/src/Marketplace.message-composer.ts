/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, InstantiateMsg, ExpiryRange, Coin, PriceRange, ExecuteMsg, Timestamp, Uint64, QueryMsg, QueryOptionsForString, QueryOptionsForTupleOfUint128AndString, QueryOptionsForTupleOfStringAndString, QueryOptionsForTupleOfUint64AndStringAndString, QueryOptionsForTupleOfUint64AndStringAndStringAndString, NullableAsk, Addr, Decimal, Ask, ArrayOfString, ArrayOfAsk, NullableCollectionOffer, CollectionOffer, ArrayOfCollectionOffer, Offer, ArrayOfOffer, SudoParams } from "./Marketplace.types";
export interface MarketplaceMessage {
  contractAddress: string;
  sender: string;
  setAsk: ({
    assetRecipient,
    collection,
    expires,
    findersFeeBps,
    price,
    reserveFor,
    tokenId
  }: {
    assetRecipient?: string;
    collection: string;
    expires?: Timestamp;
    findersFeeBps?: number;
    price: Coin;
    reserveFor?: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAskPrice: ({
    collection,
    price,
    tokenId
  }: {
    collection: string;
    price: Coin;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAsk: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeStaleAsk: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  migrateAsks: ({
    limit
  }: {
    limit: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setOffer: ({
    assetRecipient,
    collection,
    expires,
    finder,
    findersFeeBps,
    tokenId
  }: {
    assetRecipient?: string;
    collection: string;
    expires?: Timestamp;
    finder?: string;
    findersFeeBps?: number;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  buyNow: ({
    assetRecipient,
    collection,
    finder,
    tokenId
  }: {
    assetRecipient?: string;
    collection: string;
    finder?: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptOffer: ({
    assetRecipient,
    bidder,
    collection,
    finder,
    tokenId
  }: {
    assetRecipient?: string;
    bidder: string;
    collection: string;
    finder?: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeOffer: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  rejectOffer: ({
    bidder,
    collection,
    tokenId
  }: {
    bidder: string;
    collection: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeStaleOffer: ({
    bidder,
    collection,
    tokenId
  }: {
    bidder: string;
    collection: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  migrateOffers: ({
    limit
  }: {
    limit: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setCollectionOffer: ({
    assetRecipient,
    collection,
    expires,
    findersFeeBps
  }: {
    assetRecipient?: string;
    collection: string;
    expires?: Timestamp;
    findersFeeBps?: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptCollectionOffer: ({
    assetRecipient,
    bidder,
    collection,
    finder,
    tokenId
  }: {
    assetRecipient?: string;
    bidder: string;
    collection: string;
    finder?: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCollectionOffer: ({
    collection
  }: {
    collection: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeStaleCollectionOffer: ({
    bidder,
    collection
  }: {
    bidder: string;
    collection: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  migrateCollectionOffers: ({
    limit
  }: {
    limit: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MarketplaceMessageComposer implements MarketplaceMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAsk = this.setAsk.bind(this);
    this.updateAskPrice = this.updateAskPrice.bind(this);
    this.removeAsk = this.removeAsk.bind(this);
    this.removeStaleAsk = this.removeStaleAsk.bind(this);
    this.migrateAsks = this.migrateAsks.bind(this);
    this.setOffer = this.setOffer.bind(this);
    this.buyNow = this.buyNow.bind(this);
    this.acceptOffer = this.acceptOffer.bind(this);
    this.removeOffer = this.removeOffer.bind(this);
    this.rejectOffer = this.rejectOffer.bind(this);
    this.removeStaleOffer = this.removeStaleOffer.bind(this);
    this.migrateOffers = this.migrateOffers.bind(this);
    this.setCollectionOffer = this.setCollectionOffer.bind(this);
    this.acceptCollectionOffer = this.acceptCollectionOffer.bind(this);
    this.removeCollectionOffer = this.removeCollectionOffer.bind(this);
    this.removeStaleCollectionOffer = this.removeStaleCollectionOffer.bind(this);
    this.migrateCollectionOffers = this.migrateCollectionOffers.bind(this);
  }

  setAsk = ({
    assetRecipient,
    collection,
    expires,
    findersFeeBps,
    price,
    reserveFor,
    tokenId
  }: {
    assetRecipient?: string;
    collection: string;
    expires?: Timestamp;
    findersFeeBps?: number;
    price: Coin;
    reserveFor?: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_ask: {
            asset_recipient: assetRecipient,
            collection,
            expires,
            finders_fee_bps: findersFeeBps,
            price,
            reserve_for: reserveFor,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  updateAskPrice = ({
    collection,
    price,
    tokenId
  }: {
    collection: string;
    price: Coin;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_ask_price: {
            collection,
            price,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  removeAsk = ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_ask: {
            collection,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  removeStaleAsk = ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_stale_ask: {
            collection,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  migrateAsks = ({
    limit
  }: {
    limit: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          migrate_asks: {
            limit
          }
        })),
        funds
      })
    };
  };
  setOffer = ({
    assetRecipient,
    collection,
    expires,
    finder,
    findersFeeBps,
    tokenId
  }: {
    assetRecipient?: string;
    collection: string;
    expires?: Timestamp;
    finder?: string;
    findersFeeBps?: number;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_offer: {
            asset_recipient: assetRecipient,
            collection,
            expires,
            finder,
            finders_fee_bps: findersFeeBps,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  buyNow = ({
    assetRecipient,
    collection,
    finder,
    tokenId
  }: {
    assetRecipient?: string;
    collection: string;
    finder?: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          buy_now: {
            asset_recipient: assetRecipient,
            collection,
            finder,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  acceptOffer = ({
    assetRecipient,
    bidder,
    collection,
    finder,
    tokenId
  }: {
    assetRecipient?: string;
    bidder: string;
    collection: string;
    finder?: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_offer: {
            asset_recipient: assetRecipient,
            bidder,
            collection,
            finder,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  removeOffer = ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_offer: {
            collection,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  rejectOffer = ({
    bidder,
    collection,
    tokenId
  }: {
    bidder: string;
    collection: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reject_offer: {
            bidder,
            collection,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  removeStaleOffer = ({
    bidder,
    collection,
    tokenId
  }: {
    bidder: string;
    collection: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_stale_offer: {
            bidder,
            collection,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  migrateOffers = ({
    limit
  }: {
    limit: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          migrate_offers: {
            limit
          }
        })),
        funds
      })
    };
  };
  setCollectionOffer = ({
    assetRecipient,
    collection,
    expires,
    findersFeeBps
  }: {
    assetRecipient?: string;
    collection: string;
    expires?: Timestamp;
    findersFeeBps?: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_collection_offer: {
            asset_recipient: assetRecipient,
            collection,
            expires,
            finders_fee_bps: findersFeeBps
          }
        })),
        funds
      })
    };
  };
  acceptCollectionOffer = ({
    assetRecipient,
    bidder,
    collection,
    finder,
    tokenId
  }: {
    assetRecipient?: string;
    bidder: string;
    collection: string;
    finder?: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_collection_offer: {
            asset_recipient: assetRecipient,
            bidder,
            collection,
            finder,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  removeCollectionOffer = ({
    collection
  }: {
    collection: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_collection_offer: {
            collection
          }
        })),
        funds
      })
    };
  };
  removeStaleCollectionOffer = ({
    bidder,
    collection
  }: {
    bidder: string;
    collection: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_stale_collection_offer: {
            bidder,
            collection
          }
        })),
        funds
      })
    };
  };
  migrateCollectionOffers = ({
    limit
  }: {
    limit: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          migrate_collection_offers: {
            limit
          }
        })),
        funds
      })
    };
  };
}